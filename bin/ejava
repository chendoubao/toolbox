#! /bin/bash

# MAINTAINER Ma Qian<maqian258@gmail.com>

function get_env {
    local key="$1"
    local value=`printenv |grep "^$key=" |cut -d'=' -f2`
    local def="$2"
    [ -z "$value" ] && value="$def"

    echo $value
    return 0
}

function eval_env {
    local key="$1" 
    local def="$2"

    local value=$(get_env "$key")
    while true; do
        local v=`echo $value |sed 's/${\(.*\)}/\1/'`
        if [ "$v" = "$value" ]; then
            break
        fi
        value=$(get_env "$v")
    done

    [ -z "$value" ] && value="$def"
    echo $value
    return 0
}

function get_value_as_mbytes {
    local value="$1"

    if [ -z "$value" ]; then
        #echo Parameter of function get_value_as_mbytes should not be empty 
        return 0
    fi

    if [ -n "$value" ] && [[ ! "$value" =~ [0-9]+[kKmMgG]*$ ]]; then
        echo Invalid parameter $value for function get_value_as_mbytes
        return 1
    fi

    local num=`echo $value|sed 's/\([0-9]*\)[kKmMgG]*/\1/'`
    if [[ "$value" =~ [0-9]+$ ]]; then
        echo $((num / 1048576))
    elif [[ "$value" =~ [0-9]+[kK]$ ]]; then
        echo $((num / 1024))
    elif [[ "$value" =~ [0-9]+[mM]$ ]]; then
        echo $num
    elif [[ "$value" =~ [0-9]+[gG]$ ]]; then
        echo $((num * 1024))
    fi
    return 0
}

function get_value_as_switch {
    local value="$1"
    
    if [ -z "$value" ]; then
        #echo Parameter of function get_value_as_switch should not be empty
        return 0
    fi

    if [[ "$value" =~ [oO][nN] ]] || [[ "$value" =~ [tT][rR][uU][eE] ]] || [ "$value" = "1" ]; then
        echo on
    else
        echo off
    fi
    return 0
}

function get_value_as_port {
    local value="$1"
    
    if [ -z "$value" ]; then
        #echo Parameter of function get_value_as_port should not be empty
        return 0
    fi

    if [[ ! "$value" =~ ^[1-9][0-9]*$ ]];then
        echo Invalid parameter $value for function get_value_as_port
        return 1
    fi
    
    echo $value
    return 0
}

function get_java_opt {
    local opts="$1"
    local key="$2"
    local value="$3"

    if [[ "$opts" =~ .*$key=?.* ]]; then
        value=`echo $opts|sed "s/.*$key=*\([^ =]*\).*/\1/"`
    fi

    echo $value
    return 0
}

function get_java_opt_as_mbytes {
    local opts="$1"
    local key="$2"
    local def="$3"

    local value=$(get_java_opt "$opts" "$key" "$def")  
    echo $(get_value_as_mbytes "$value")
    return $? 
}

function get_java_opt_as_switch {
    local opts="$1"
    local key="$2"
    local def="$3"
    [ -z "$def" ] && def="off"

    local value=$(get_java_opt "$opts" "$key" "$def")
    echo $(get_value_as_switch "$value")
    return $?
}

function get_env_as_mbytes {
    local key="$1"
    local def="$2"

    local value=$(eval_env "$key" "$def")
    echo $(get_value_as_mbytes "$value")
    return $?
}

function get_env_as_switch {
    local key="$1"
    local def="$2"
    [ -z "$def" ] && def="off"
   
    local value=$(eval_env "$key" "$def")
    echo $(get_value_as_switch "$value")
    return $? 
}

function get_env_as_port {
    local key="$1"
    local def="$2"

    local value=$(eval_env "$key" "$def")
    echo $(get_value_as_port "$value")
    return $?
}


JAVACMD=`type java |awk '{print $(NF)}'`
$JAVACMD -version > /dev/null 2>&1
[ $? -ne 0 ] && echo Could not find java program in your system, please install a java package or set JAVA_HOME in PATH. && exit 1

env_name=$(get_env "ENVIRONMENT" "dev")
service_name=$(get_env "SERVICE_NAME" "java")
mesos_task_id=$(get_env "MESOS_TASK_ID" "apptask")
task_id=$(get_env "X_TASK_ID" "$mesos_task_id")
log_path=$(get_env "X_LOG_PATH" "/var/log/$service_name/$task_id"); mkdir -p $log_path
heap_ratio=$(get_env "X_HEAP_RATIO" "0.6")

verbose=$(get_env_as_switch "X_VERBOSE")
nmt=$(get_env_as_switch "X_NMT")
profile=$(get_env_as_switch "X_PROFILE")
gc_log=$(get_env_as_switch "X_GC_LOG")
oom_dump=$(get_env_as_switch "X_OOM_DUMP" "on")
debug=$(get_env_as_switch "X_DEBUG")
jmx=$(get_env_as_switch "X_JMX")
limit_in_mb=$(get_env_as_mbytes "X_MEM_LIMIT")


if [ "$debug" = "on" ]; then
    debug_port=$(get_env_as_port "X_DEBUG_PORT" $(get_env "PORT_5005" "5005"))
    [ $? -ne 0 ] && echo $debug_port && exit 1
    debug_param="-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=$debug_port"
fi

if [ "$jmx" = "on" ];then
    jmx_host=$(eval_env "X_JMX_HOST" $(get_env "HOST" "$(hostname)"))
    jmx_port=$(get_env_as_port "X_JMX_PORT" $(get_env "PORT_1099" "1099"))
    [ $? -ne 0 ] && echo $jmx_port && exit 1
    jmx_param="-Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.port=$jmx_port -Dcom.sun.management.jmxremote.rmi.port=$jmx_port -Dcom.sun.management.jmxremote.ssl=false -Dcom.sun.management.jmxremote.authenticate=false -Djava.rmi.server.hostname=$jmx_host"
fi

if [ "$verbose" = "on" ];then
    echo Feature Flag:
    echo X_TASK_ID: $task_id
    echo X_LOG_PATH: $log_path
    echo X_VERBOSE: $verbose
    echo X_NMT: $nmt
    echo X_PROFILE: $profile
    echo X_GC_LOG: $gc_log
    echo X_OOM_DUMP: $oom_dump
    echo X_DEBUG: $debug
    echo X_DEBUG_PORT: $debug_port
    echo X_JMX: $jmx
    echo X_JMX_PORT: $jmx_port
    echo X_HEAP_RATIO: $heap_ratio
fi

ext_params="-XX:+UnlockExperimentalVMOptions -XX:+UnlockDiagnosticVMOptions"
[ "$verbose" = "on" ] && ext_params="$ext_params -XX:+PrintVMOptions -XX:+PrintCommandLineFlags"
[ "$gc_log" = "on" ] && ext_params="$ext_params -XX:+PrintGCDateStamps -XX:+PrintGCDetails -Xloggc:${log_path}/gc.log"
[ "$oom_dump" = "on" ] && ext_params="$ext_params -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=${log_path}/heapdump.hprof"
[ "$nmt" = "on" ] && ext_params="$ext_params -XX:NativeMemoryTracking=summary -XX:+PrintNMTStatistics"
[ "$profile" = "on" ] && ext_params="$ext_params -XX:+PreserveFramePointer"
[ "$debug" = "on" ] && ext_params="$ext_params $debug_param"
[ "$jmx" = "on" ] && ext_params="$ext_params $jmx_param"

java_params="$*"; [[ ! $java_params == *$JAVA_OPTS* ]] && java_params="$JAVA_OPTS $java_params"
# apply memory limitation on when /sys/fs/cgroup/memory/memory.limit_in_bytes is set
if [ -z "$limit_in_mb" ] && [ -f "/sys/fs/cgroup/memory/memory.limit_in_bytes" ]; then
    limit_in_bytes=$(cat /sys/fs/cgroup/memory/memory.limit_in_bytes)
    limit_in_mb=$((limit_in_bytes / 1048576))
fi

if [ "$verbose" = "on" ];then
  echo X_MEM_LIMIT: ${limit_in_mb:--1}M
fi

sw=$(get_java_opt_as_switch "$java_params" "-Dskywalking" $(get_env_as_switch "SW" "off"))
sw_agent="$SW_AGENT_PATH/skywalking-agent.jar"
sw_trace_ignore_path=$(get_env "skywalking.trace.ignore_path")
sw_replace_pattern=$(get_env "skywalking.peer.replace_patterns")

if [ "$sw" = "on" ]; then
    ext_params="$ext_params -javaagent:${sw_agent}=agent.service_name=${service_name}.${env_name},collector.backend_service=${SW_AGENT_COLLECTOR_BACKEND_SERVICES},logging.level=info,logging.dir=$log_path"
    [ -n "$sw_trace_ignore_path" ] && ext_params="$ext_params -Dskywalking.trace.ignore_path='${sw_trace_ignore_path}'"
    [ -n "$sw_replace_pattern" ] && ext_params="$ext_params -Dskywalking.peer.replace_patterns='${sw_replace_pattern}'"
fi

if [ -z "$limit_in_mb" ] || [ "$limit_in_mb" -gt "1048576" ]; then
    [ "$verbose" = "on" ] && echo $JAVACMD $ext_params $java_params
    exec $JAVACMD $ext_params $java_params
else

    ext_params="$ext_params -XX:MaxRAM=${limit_in_mb}m"

    min_heap_free_ratio=$(get_java_opt "$java_params" "-XX:MinHeapFreeRatio")
    [ $? -ne 0 ] && echo $min_heap_free_ratio && exit 1
    if [ -z "$min_heap_free_ratio" ]; then
        min_heap_free_ratio=20
        ext_params="$ext_params -XX:MinHeapFreeRatio=$min_heap_free_ratio"
    fi

    max_heap_free_ratio=$(get_java_opt "$java_params" "-XX:MaxHeapFreeRatio")
    [ $? -ne 0 ] && echo $max_heap_free_ratio && exit 1
    if [ -z "$max_heap_free_ratio" ]; then
        max_heap_free_ratio=40
        ext_params="$ext_params -XX:MaxHeapFreeRatio=$max_heap_free_ratio"
    fi

    gc_time_ratio=$(get_java_opt "$java_params" "-XX:GCTimeRatio")
    [ $? -ne 0 ] && echo $gc_time_ratio && exit 1
    if [ -z "$gc_time_ratio" ]; then
        gc_time_ratio=4
        ext_params="$ext_params -XX:GCTimeRatio=$gc_time_ratio"
    fi

    parallel_gc_threads=$(get_java_opt "$java_params" "-XX:ParallelGCThreads")
    [ $? -ne 0 ] && echo $parallel_gc_threads && exit 1
    if [ -z "$parallel_gc_threads" ]; then
        has_parallel_gc_threads=0
        parallel_gc_threads=2
    fi

    adaptive_size_policy_weight=$(get_java_opt "$java_params" "-XX:AdaptiveSizePolicyWeight")
    [ $? -ne 0 ] && echo $adaptive_size_policy_weight && exit 1
    if [ -z "$adaptive_size_policy_weight" ]; then
        adaptive_size_policy_weight=90
        ext_params="$ext_params -XX:AdaptiveSizePolicyWeight=$adaptive_size_policy_weight"
    fi

    max_heap_size=$(get_java_opt_as_mbytes "$java_params" "-XX:MaxHeapSize")
    [ $? -ne 0 ] && echo $max_heap_size && exit 1
    if [ -z "$max_heap_size" ]; then
        max_heap_size=$(get_java_opt_as_mbytes "$java_params" "-Xmx")
    fi
    if [ -z "$max_heap_size" ]; then
        max_heap_size=`echo $heap_ratio $limit_in_mb|awk '{print int($1 * $2)}'`
        ext_params="$ext_params -Xmx${max_heap_size}m"
        [ "$verbose" = "on" ] && echo the jvm option -Xmx is not set, so we figure out the value ${max_heap_size}m
    fi
    if [ $max_heap_size -gt $limit_in_mb ]; then
        echo memory required exceed the limitation ${limit_in_mb}m && exit 1
    fi

    min_heap_size=$(get_java_opt_as_mbytes "$java_params" "-Xms")
    [ $? -ne 0 ] && echo $min_heap_size && exit 1
    if [ -z "$min_heap_size" ]; then
        min_heap_size=$((max_heap_size/2))
        ext_params="$ext_params -Xms${min_heap_size}m"
        [ "$verbose" = "on" ] && echo the jvm option -Xms is not set, so we figure out the value ${min_heap_size}m
    fi

    thread_stack_size=$(get_java_opt "$java_params" "-Xss")
    [ $? -ne 0 ] && echo $thread_stack_size && exit 1
    if [ -z "$thread_stack_size" ]; then
        thread_stack_size=$(get_java_opt "$java_params" "-XX:ThreadStackSize")
    fi
    if [ -z "$thread_stack_size" ]; then
        thread_stack_size=512k
        ext_params="$ext_params -Xss${thread_stack_size}"
    fi

    [ "$verbose" = "on" ] && echo $JAVACMD $ext_params $java_params 
    exec $JAVACMD $ext_params $java_params
fi
